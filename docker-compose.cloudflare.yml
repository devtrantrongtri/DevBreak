version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: devbreak_postgres
    environment:
      POSTGRES_DB: user_management
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d user_management"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

  # Redis tạm thời comment out theo yêu cầu
  # redis:
  #   image: redis:7-alpine
  #   container_name: devbreak_redis
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  backend:
    image: devbreak-backend:latest
    container_name: devbreak_backend
    build:
      context: ./app-server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=admin
      - DB_PASSWORD=password
      - DB_DATABASE=user_management
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-2024
      - JWT_EXPIRES_IN=2100h
      - PORT=3000
      - API_URL=http://localhost:3000
      # Redis tạm thời comment out
      # - REDIS_HOST=redis
      # - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      # redis:
      #   condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    image: devbreak-frontend:latest
    container_name: devbreak_frontend
    build:
      context: ./app-ui
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://devtri.xyz/api
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: devbreak_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.cloudflare.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  # redis_data:

networks:
  app-network:
    driver: bridge
